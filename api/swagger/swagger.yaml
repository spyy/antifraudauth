swagger: "2.0"
info:
  version: "0.0.1"
  title: User account
  description: User account management
  termsOfService: http://io.io/terms/
  contact:
    name: Sales & support
    url: http://io.io/contact/
    email: contact@io.io
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths 
basePath: /
# 
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /v1/user/create_account:
    x-swagger-router-controller: v1_create_account
    post:
      parameters:
        - name: user
          in: body
          description: The user details must be passed in JSON format in the body.
          required: true
          schema:
            $ref: "#/definitions/V1CreateAccountData"
      responses:
        "200":
          description: User is registered.
          schema:
            $ref: "#/definitions/V1CreateAccountData"
        "500":
          description: Operation failed.
          schema:
            $ref: "#/definitions/V1CreateAccountData"
  /v1/user/delete_account:
    x-swagger-router-controller: v1_delete_account
    post:
      parameters:
        - name: user
          in: body
          description: The user details must be passed in JSON format in the body.
          required: true
          schema:
            $ref: "#/definitions/V1DeleteAccountData"
      responses:
        "200":
          description: User is unregistered.
        "500":
          description: Operation failed.     
  /v1/authenticate:
    # binds a127 app logic to a route
    x-swagger-router-controller: v1_authenticate
    get:
      description: Returns challenge parameters to the caller. The caller 
        must then complete the challenge and return the answer in order to
        receive an authentication token to the service it wants to consume.
      # used as the method name of the controller
      operationId: get
      parameters:
        - name: domain
          in: query
          description: The FQDN (RFC1035) to which the client wants to 
            authenticate to, eg. 'payapi.io'. HTTPS is always used and
            SSL certificate for the domain must always be valid.
          required: true
          type: string
        - name: ipAddress
          in: query
          description: Valid external IP address of client.
          required: true
          type: string
        - name: userId
          in: query
          description: User ID of the client in the domain it is authenticating into.
          required: true
          type: string
        - name: deviceId
          in: query
          description: Device ID of the client. Applicable to mobile devices.
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/V1Challenge"
        "503":
          description: Error
          schema:
            $ref: "#/definitions/V1ChallengeError"
    post:
      description: Post the result of the challege to receive an authentication
        and authorization token to the service you requested. 
      # used as the method name of the controller
      operationId: post
      parameters:
        - name: V1ChallengeResult
          in: body
          description: The result of challenge calculation.
          required: true
          schema:
            # a pointer to a definition
            $ref: "#/definitions/V1ChallengeResult"
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/V1AuthenticationToken"
        "401":
          description: Unauthorized. This error is permanent using the same input parameters.
          schema:
            # a pointer to a definition
            $ref: "#/definitions/V1AuthenticationError"
        # responses may fall through to errors
        "503":
          description: Error
          schema:
            $ref: "#/definitions/V1AuthenticationError"
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  V1Challenge:
    required:
      - uuid
      - algorithm
      - value
      - iterations
    properties:
      uuid:
        type: string
        description: The UUID of the challenge.
      value:
        type: string
        description: The challenge.
      algorithm:
        type: string
        description: The algorithm that should be used to complete this challenge.
          Currently supported algorithms include 'HS512'.
      iterations:
        type: integer
        description: How many times the challenge must be iterated.
  V1ChallengeError:
    required:
      - uuid
    properties:
      uuid:
        type: string
        description: The uuid of this error, for technical troubleshooting.
      reason:
        type: string
        description: The reason for challenge error, if known.
  V1ChallengeResult:
    required:
      - uuid
      - result
    properties:
      uuid: 
        type: string
        description: The UUID for identifying the challenge for this result.
      result:
        type: string
        description: The result which the client calculated.
  V1AuthenticationToken:
    required:
      - uuid
      - expires
      - domain
    properties:
      uuid:
        type: string
        description: The UUID for identifying the authentication.
      expires:
        type: string
        description: When the token expires and can no longer be used for 
          authenticating.
      domain:
        type: string
        description: The domain which this token can be used to authenticate to.
      fraudScore:
        type: integer
        description: Fraud score coverage.
      coverage:
        type: string
        enum: ['MINIMAL','LOW','MEDIUM','HIGH','MAXIMUM','KYC']
        description: The fraud score for the given client parameters.
  V1AuthenticationError:
    required:
      - domain
    properties:
      domain:
        type: string
  V1CreateAccountData:
    required:
      - user
      - server
      - password
    properties:
      user: 
        type: string
        description: User ID.
      server:
        type: string
        description: XMPP domain name.
      password:
        type: string
        description: User password.
  V1DeleteAccountData:
    required:
      - user
      - server
    properties:
      user: 
        type: string
        description: User ID.
      server:
        type: string
        description: XMPP domain name.
